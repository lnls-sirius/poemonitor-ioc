PREFIXO:PwrState-Sel (Off/On) (escrita sob demanda)
PREFIXO:PwrState-Sts (Off/On) (leitura uma vez por segundo)
PV  do STATUS                 (status) -> mostrar os 5 estados possiveis

Na inicialização do IOC: ler o estado atual da interface e atribuir ele às duas PVs acima.

====================================================
status possiveis a serem regastados das entradas POE
====================================================
• Searching: The port is trying to detect a PD connection. (PPDS_SEARCHING)
• Delivering: The port is delivering power to a PD.        (PPDS_DELIVERING)
• Disabled: On the indicated port, either PoE support is disabled or PoE power is enabled (PPDS_DISABLED)
but the PoE module does not have enough power available to supply the port's power
needs.
• Fault: The switch detects a problem with the connected PD. (PPDS_FAULT)
• Other Fault: The switch has detected an internal fault that prevents it from supplying (PPDS_OTHERFAULT)
power on that port.
---------------------------------------------------------------------------------------------------
pv -> delivering or not delivering -> basicamente ON ou OFF
pv -> complete status              -> Mostra o estado completo, mais detalhado (explicação do q é o estado inserida na PV?)

verificar se da para pegar stats de 3 portas em 1 segundo -> é possivel, foi realizado um teste para tentar obter 10 amostras de cada
em 1 segundo e demorou 1.127 segundos.

usar pykaspy para criar as PVs -> criar todas as pvs

arquivo com listagem de configuração
de cada dispisitivo -> o IOC deverá ler esse arquivo de configuração e saber através dele quais são todos os
dispositivos que devem ser monitorados, esse arquivo deve conter as seguintes informações de cada dispositivos
    ip do switch , (comunicação com o switch)
    numero da porta,-> (comunicação com o switch)
    niome do dispostiivo -> (prefixo da PV)


Fazer thread para buscar na API o valor e traduzir esse valor para oq mostrar na PV
    -> criar as filas
    -> criar toda a thread scan
        -> criar os eventos para inserir os gets periodicos

-> criar as thread process para cada fila
    ->executar leitura de valores (ok)
    ->executar escrita de valores
        ->Fazer a inserção da request de escrita (mover o cpodigo que esta no
        lugar errado como sinalizado pelos comentarios)
        ->executar o request
fazer pela função write a permissão de escrita na devida pv, e isso faz com que ao invés de alterar naquele momento o valor da pv
ele insira uma requisição de escrita TUPLA -> ("NOME DA REQUISIÇÃO", VALOR) na fila do respectivo switch que dps será processada pela thread process
e ai sim alterado seu valor pelo valor requisitado

testar colocar um alarme nop set param e ver oque da
    -> IMPORTANTE-> VALOR 10 DE ALARM (TIMEOUT) é o comumente usado para qnd a PV está desconectado

definir valores iniciais para PV de seleção(put)
TESTAR ELAS

OQUE ACONTECE SE O SWITCH FOR ESETADO, OS VALORES DAS PVS FICAM INCONSISTENTES?
    -> isso ja foi tratado com a atualização da PV de seleção juntamente com a PV de status em todo processo de scan

inserir valores de alerta para as PVs

Concertar a obtenção da PV seletora, ela é apenas para saber qnd foi escrito ou não. INiciar uma vez no scan e dps não mais

USAR A CLASSE SESSION DA BIBLIOTECA REQUESTS NO LUGAR DA CLASSE CRIADA POR MIM ARUBAREQUESTER (Faz mais sentido)
    ->substituir todos os usos
    ->deletar a classe do código

#####PAREI AQUI #######

VER LINHA 186

colocar o logout no requester
    -> qualquer exeção gerada no meio da conexão , que não seja connexction lost , requisitar um logout
    -> em casos de perda de conexão, como tratar o logout???
        ->para a inserção de requisições na fila, limpa as filas?
        -> IDEIA: Configurar o timeout de seção do switch para valores pequenos, considerando q sempre será realizada requisições em curto periodo de temopo
        ele não deve ocorrer durante um funcionamento comum
        ->tratar excessão de timeout de chamada
            -> isso deve ser feito apenas nos envios de put da PV de seleção, pois as outras são lidas periodicamente, caso aconteça o timeout do put
                deve-se inserir um alerta na PV
    -> Fazer o código se recuperar de perdas de conexão

tela do css -> baixar ultima versão de produção do ESS

adicionar PVs no archivers

inserir no inicio do código breve descrição de seu propósito

color nome do autor

######PROBLEMA, PQ ESTÁ GASTANDO TANTA MEMÓRIA ESSE PROGRAMA????####################
    ->Aparentemente as requisições REST não consomem praticamente nada da RAM

EXPLICAR EM UM DOCUMENTO O ESQUEMA DO ARQUIVO DE CONFIGURAÇÃO E SUBIR NO GIT

DESENHAR O DIAGRAMA DA ARQUITETURA E SUBIR NO GIT

REALIZAR CONEXÃO PERSISTENTE??

VERIFICAR OQUE FAZER SOB FALHA NOS REQUESTS, COMO TRATAR OS ERROS?

SE EU PERDER CONEXÃO COM O SWITCH OQUE FAZER? -> PROBLMA DAS 5 MAXIMAS CONEXÕES, N POSSO RESETAR O SWITCH!!!!!! E ELE TEM QUE RECPERAR
A CONEXÃO QND ELA VOLTAR A FICAR ATIVA
    ->POSSIVEL SOLUÇÃO, ARMAZENAR TODOS OS DADOS DE CONEXÃO RPESENTES NO ARQUIVO DE CONFIGURAÇÃO EM UM LISTA E USAR ESSES DADOS DA LISTA
    NA REALIZAÇÃO DAS CONEXÕES, CASO PERCA-SE A CONEXÃO ENTRA-SE EM UM LOOP INFINITO TENTADO RESTABELECE-LA, PELO ID SER LINKADO AO ID
    DA THREAD, DA PARA SABER EXATAMENTE QUAL FOI O SWITCH PERDIDO E QUAL O ENDEREÇO QUE DEVEMOS TENTAR RECUPERAR

COLOCAR AS CLASSES EM UM ARQUIVO SEPARADO OU NO MESMO ARQUIVO MESMO?

indicar versão do python usada

DELETAR TODAS CÓDIGOS DE DEBUGS -> control f DEBUG
